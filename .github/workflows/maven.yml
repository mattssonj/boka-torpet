# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
name: Java CI with Maven
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test_js_code_quality:
    name: Run Prettier with ESLint rules
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check code quality with ESLint
        run: npx prettier --check . && npx eslint --fix src

  build:
    name: Build, Test and upload Test Coverage
    needs: test_js_code_quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build and Test
        run: mvn package
      - name: Upload Test Coverage
        uses: codecov/codecov-action@v1
        with:
          name: boka-torpet
      - uses: actions/upload-artifact@v2
        with:
          name: deployable
          path: |
            target/*jar
            pom.xml

  deploy_demo:
    name: Deploy Demo application
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/download-artifact@v2
        with:
          name: deployable
      - name: Deploying Demo application
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: mvn heroku:deploy-only -Ddeploy.profile=demo -Dheroku.appName=${{ secrets.HEROKU_DEMO_APP }}

  deploy_prod:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: Prod
    steps:
      - uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/download-artifact@v2
        with:
          name: deployable
      - name: Deploying Production Application
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: mvn heroku:deploy-only -Ddeploy.profile=prod -Dheroku.appName=${{ secrets.HEROKU_PROD_APP }}
